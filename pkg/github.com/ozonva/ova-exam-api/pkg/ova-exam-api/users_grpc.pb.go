// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_exam_api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	// Создание пользователя
	CreateUserV1(ctx context.Context, in *CreateUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Создание пользователей
	MultiCreateUserV1(ctx context.Context, in *MultyCreateUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Возвращает информацию о пользователе
	DescribeUserV1(ctx context.Context, in *DescribeUserV1Request, opts ...grpc.CallOption) (*UserV1Response, error)
	// Список пользователей
	ListUsersV1(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListUsersV1Response, error)
	// Удаляет пользователя
	RemoveUserV1(ctx context.Context, in *RemoveUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Изменяет пользователя
	UpdateUserV1(ctx context.Context, in *UpdateUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUserV1(ctx context.Context, in *CreateUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ozonva.ova_exam_api.Users/CreateUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) MultiCreateUserV1(ctx context.Context, in *MultyCreateUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ozonva.ova_exam_api.Users/MultiCreateUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DescribeUserV1(ctx context.Context, in *DescribeUserV1Request, opts ...grpc.CallOption) (*UserV1Response, error) {
	out := new(UserV1Response)
	err := c.cc.Invoke(ctx, "/ozonva.ova_exam_api.Users/DescribeUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListUsersV1(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListUsersV1Response, error) {
	out := new(ListUsersV1Response)
	err := c.cc.Invoke(ctx, "/ozonva.ova_exam_api.Users/ListUsersV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) RemoveUserV1(ctx context.Context, in *RemoveUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ozonva.ova_exam_api.Users/RemoveUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUserV1(ctx context.Context, in *UpdateUserV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ozonva.ova_exam_api.Users/UpdateUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	// Создание пользователя
	CreateUserV1(context.Context, *CreateUserV1Request) (*empty.Empty, error)
	// Создание пользователей
	MultiCreateUserV1(context.Context, *MultyCreateUserV1Request) (*empty.Empty, error)
	// Возвращает информацию о пользователе
	DescribeUserV1(context.Context, *DescribeUserV1Request) (*UserV1Response, error)
	// Список пользователей
	ListUsersV1(context.Context, *empty.Empty) (*ListUsersV1Response, error)
	// Удаляет пользователя
	RemoveUserV1(context.Context, *RemoveUserV1Request) (*empty.Empty, error)
	// Изменяет пользователя
	UpdateUserV1(context.Context, *UpdateUserV1Request) (*empty.Empty, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) CreateUserV1(context.Context, *CreateUserV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserV1 not implemented")
}
func (UnimplementedUsersServer) MultiCreateUserV1(context.Context, *MultyCreateUserV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateUserV1 not implemented")
}
func (UnimplementedUsersServer) DescribeUserV1(context.Context, *DescribeUserV1Request) (*UserV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUserV1 not implemented")
}
func (UnimplementedUsersServer) ListUsersV1(context.Context, *empty.Empty) (*ListUsersV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersV1 not implemented")
}
func (UnimplementedUsersServer) RemoveUserV1(context.Context, *RemoveUserV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserV1 not implemented")
}
func (UnimplementedUsersServer) UpdateUserV1(context.Context, *UpdateUserV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserV1 not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_CreateUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_exam_api.Users/CreateUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUserV1(ctx, req.(*CreateUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_MultiCreateUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultyCreateUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).MultiCreateUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_exam_api.Users/MultiCreateUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).MultiCreateUserV1(ctx, req.(*MultyCreateUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DescribeUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DescribeUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_exam_api.Users/DescribeUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DescribeUserV1(ctx, req.(*DescribeUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListUsersV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListUsersV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_exam_api.Users/ListUsersV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListUsersV1(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_RemoveUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RemoveUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_exam_api.Users/RemoveUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RemoveUserV1(ctx, req.(*RemoveUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_exam_api.Users/UpdateUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUserV1(ctx, req.(*UpdateUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonva.ova_exam_api.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserV1",
			Handler:    _Users_CreateUserV1_Handler,
		},
		{
			MethodName: "MultiCreateUserV1",
			Handler:    _Users_MultiCreateUserV1_Handler,
		},
		{
			MethodName: "DescribeUserV1",
			Handler:    _Users_DescribeUserV1_Handler,
		},
		{
			MethodName: "ListUsersV1",
			Handler:    _Users_ListUsersV1_Handler,
		},
		{
			MethodName: "RemoveUserV1",
			Handler:    _Users_RemoveUserV1_Handler,
		},
		{
			MethodName: "UpdateUserV1",
			Handler:    _Users_UpdateUserV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
